@inject IAsyncRepository<Todo> TodoRepository

<MudListItem>
    @if (_isEditing)
    {
        <MudInput @bind-Value="Todo.Text" TextChanged="() => TodoRepository.Update(Todo)"/>
        <MudIconButton Icon="@(Icons.Sharp.Check)" OnClick="@(() => _isEditing = false)"/>
    }
    else
    {
        <MudButton Style="text-transform: none;" OnClick="ToggleChecked">
            <MudText Style="@(Todo.Checked ? "text-decoration:line-through" : "")">
                @Todo.Text
            </MudText>
        </MudButton>
        <MudIconButton Icon="@(Icons.Sharp.Create)" OnClick="@(_ => _isEditing = true)"/>
        <MudIconButton Icon="@(Icons.Sharp.Delete)" OnClick="OnDelete"/>
    }
</MudListItem>

@code {

    [Parameter]
    public Todo Todo { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnDelete { get; set; }

    private bool _isEditing;

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        if (Todo == null) throw new ArgumentNullException(nameof(Todo));
    }

    private async Task ToggleChecked()
    {
        Todo.Checked = !Todo.Checked;
        await TodoRepository.Update(Todo);
    }

}