@using Microsoft.AspNetCore.Components

<MudListItem>
    @if (_isEditing)
    {
        <MudInput @bind-Value="Todo.Text"/>
        <MudIconButton Icon="@(Icons.Sharp.Check)" OnClick="ToggleEditing"/>
    }
    else
    {
        <MudButton Style="text-transform: none;" OnClick="ToggleChecked">
            <MudCheckBox @bind-Checked="@Todo.IsChecked" />
            <MudText Style="@(Todo.IsChecked ? "text-decoration:line-through" : "")">
                @Todo.Text
            </MudText>
        </MudButton>
        <MudIconButton Icon="@(Icons.Sharp.Create)" OnClick="ToggleEditing"/>
        <MudIconButton Icon="@(Icons.Sharp.Delete)" OnClick="OnDelete"/>
    }
</MudListItem>

@code {

    [Parameter]
    public TodoItem Todo { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnDelete { get; set; }

    [Parameter]
    public EventCallback<EventArgs> OnUpdate { get; set; }

    private bool _isEditing;

    /// <inheritdoc />
    protected override void OnParametersSet()
    {
        if (Todo == null) throw new ArgumentNullException(nameof(Todo));
    }

    private async Task ToggleChecked()
    {
        Todo.IsChecked = !Todo.IsChecked;
        await OnUpdate.InvokeAsync(EventArgs.Empty);
    }

    private async Task ToggleEditing()
    {
        if (_isEditing)
            await OnUpdate.InvokeAsync(EventArgs.Empty);

        _isEditing = !_isEditing;
    }

}